Numerical.TOLERANCE = 1e-20;
Numerical.EPSILON = 1e-24;


Scale = function (modelWidthInFeet)
{
    ///////////////////// Unit conversions

    this.unitsToFt = modelWidthInFeet || 16.0;
    this.unitsToIn = this.unitsToFt * 12;
    this.unitsToM = this.unitsToIn * 2.54 / 100.0;
    this.unitsToPt = this.unitsToIn * 72;
    this.ftToUnits = 1.0 / this.unitsToFt;
    this.inToUnits = 1.0 / this.unitsToIn;
    this.mToUnits = 1.0 / this.unitsToM;
    this.ptToUnits = 1.0 / this.unitsToPt;

    ///////////////////// Fabrication parameters

    // Maximum size of panels to CNC
    this.cncSize = new Point(18 * this.inToUnits, 24 * this.inToUnits); 

    // Minimum material thickness between large dots and edge of 1x2 panel
    this.cncMaterialThickness = 0.25 * this.inToUnits;

    // Minimum width of load-bearing pieces on middle layer
    this.supportWidth = this.inToUnits * 0.75;

    // Hidden screws hold the front and middle layers together.
    // 1-1/4" length, #8
    this.drillHiddenScrewPilotRadius = this.inToUnits * 1/4.0 / 2;
    this.drillHiddenScrewClearanceRadius = this.inToUnits * 1/4.0 / 2;
    this.drillHiddenScrewSpacing = this.inToUnits * 8.0;
    this.drillHiddenScrewMinimumSpacing = this.inToUnits * 2.0;

    // Large mounting holes, all the way through all layers.
    this.drillMountingClearanceRadius = this.inToUnits * 5/16.0 / 2;
    this.cornerScrewDistance = this.inToUnits * 0.75;   // Required for mounting cleats
    this.drillMountingSupportRadius = this.cornerScrewDistance * 0.99;

    // Mounting holes for spinners
    this.drillSpinnerMountRadius = this.inToUnits * 1/4.0 / 2;

    // Density and width of LED strip
    this.ledSpacing = this.mToUnits / 60.0;
    this.ledMinStripLength = 4;

    // Distance to let LED light spread nicely before entering large dots
    this.ledSpreadDistance = this.ledSpacing * 1.5;

    // Size and spacing of small dots
    this.smallDotDiameter = this.inToUnits * 5/8.0;
    this.smallDotRadius = this.smallDotDiameter / 2;
    this.smallDotGap = this.smallDotDiameter;

    // Geometry of spinners inside the large dots
    this.spinnerWidthMin = this.inToUnits * 3.0;
    this.spinnerCurveRatio = 3.0;
    this.spinnerGap = this.inToUnits * 1/8.0;

    // Distance to keep LED strips from small dots, to avoid glare.
    this.topLayerThickness = 0.5 * this.inToUnits;
    this.ledStripThickness = 12e-3 * this.mToUnits;
    this.ledSmallDotDistance = this.smallDotDiameter *
        this.ledStripThickness / this.topLayerThickness;

    // Distance between small dots and added freeform supports
    this.smallDotSupportGap = this.ledSmallDotDistance * 3;

    this.bounds = new Rectangle(0, 0, 1, 0.5);

    this.clipToBounds = function ( item ) {
        var bounds = new Path.Rectangle(this.bounds);
        var group = new Group(bounds);
        group.clipped = true;
        group.addChild(item);
        return group;
    }

    this.drawGrid = function ( rectangleToCover, minorUnit, majorUnit ) { 
        var group = new Group();

        minorUnit = minorUnit || this.inToUnits;
        majorUnit = majorUnit || this.ftToUnits;

        var extended = new Rectangle(rectangleToCover);
        extended.left = Math.floor(extended.left / majorUnit) * majorUnit;
        extended.top = Math.floor(extended.top / majorUnit) * majorUnit;
        extended.right = Math.ceil(extended.right / majorUnit) * majorUnit;
        extended.bottom = Math.ceil(extended.bottom / majorUnit) * majorUnit;
        extended = extended.intersect(this.bounds);

        // Minor axis, verticals
        for (var p = new Point(extended.topLeft); p.x <= extended.right; p.x += minorUnit) {
            group.addChild(new Path.Line({
                from: p,
                to: p + (extended.bottomLeft - extended.topLeft),
                strokeColor: new Color(0, 0.2),
                strokeWidth: 0.2,
                strokeScaling: false
            }));
        }

        // Major axis, verticals
        for (var p = new Point(extended.topLeft); p.x <= extended.right; p.x += majorUnit) {
            group.addChild(new Path.Line({
                from: p,
                to: p + (extended.bottomLeft - extended.topLeft),
                strokeColor: new Color(0, 0.8),
                strokeWidth: 0.5,
                strokeScaling: false
            }));
        }

        // Minor axis, horizontals
        for (var p = new Point(extended.topLeft); p.y <= extended.bottom; p.y += minorUnit) {
            group.addChild(new Path.Line({
                from: p,
                to: p + (extended.topRight - extended.topLeft),
                strokeColor: new Color(0, 0.2),
                strokeWidth: 0.2,
                strokeScaling: false
            }));
        }

        // Major axis, horizontals
        for (var p = new Point(extended.topLeft); p.y <= extended.bottom; p.y += majorUnit) {
            group.addChild(new Path.Line({
                from: p,
                to: p + (extended.topRight - extended.topLeft),
                strokeColor: new Color(0, 0.8),
                strokeWidth: 0.5,
                strokeScaling: false
            }));
        }

        return group;
    }
}


Spinner = function (scale, json)
{
    this.scale = scale;
    this.json = json;

    this.drawMountingHoles = function() {
        return [
            new Path.Circle({
                center: this.json.center,
                radius: this.scale.drillSpinnerMountRadius,
            }),
        ];
    }


    this.draw = function () {

        var p = new Point(this.json.center);
        var outerRadius = this.json.radius - this.scale.spinnerGap * 2;
        var sideRadius = outerRadius * this.scale.spinnerCurveRatio;
        var sideDisplacement = new Point(sideRadius + this.scale.spinnerWidthMin / 2, 0);

        var outer = new Path.Circle({
            center: p,
            radius: outerRadius,
        });

        var sides = new CompoundPath([
            new Path.Circle({
                center: p - sideDisplacement,
                radius: sideRadius,
            }),
            new Path.Circle({
                center: p + sideDisplacement,
                radius: sideRadius,
            }),
        ]);

        var holes = new CompoundPath(this.drawMountingHoles());

        return outer.subtract(sides).subtract(holes);
    }
}


Growth = function (json)
{
    this.json = json;

    this.draw = function () {
        var group = new Group();

        for (var i = 0; i < this.json.panels.length; i++) {
            var panel = this.json.panels[i];

            var path = new Path({
                strokeColor: '#242',
                strokeWidth: 1,
                strokeCap: 'round',
                strokeScaling: false
            });

            path.addSegments(panel.outline);
            path.closePath();
            group.addChild(path);
        }

        for (var i = 0; i < this.json.dots.length; i++) {
            var dot = this.json.dots[i];

            var path = new Path.Circle({
                fillColor: '#422',
                center: dot.center,
                radius: dot.radius,
                strokeScaling: false
            });

            group.addChild(path);
        }

        for (var i = 0; i < this.json.strands.length; i++) {
            var strand = this.json.strands[i];

            var path = new Path({
                strokeColor: new Color(0, 0.4),
                strokeWidth: 0.5,
                strokeCap: 'round',
                strokeScaling: false
            });

            path.addSegments(strand.points);
            group.addChild(path);
        }

        return group;
    }
}


DotCollider = function ()
{
    this.list = [];

    this.add = function (point, radius)
    {
        this.list.push({ point: new Point(point), radius: radius });
    }

    this.hitTest = function (point, radius)
    {
        for (var i = 0; i < this.list.length; i++) {
            var dot = this.list[i];
            var distSquared = point.getDistance(dot.point, true);
            var r = dot.radius + radius;
            if (distSquared < r*r) {
                return true;
            }
        }
        return false;
    }
}


LedStripPlacer = function ( scale, paths )
{
    this.scale = scale;
    this.paths = paths;

    // Remove tiny paths (this also removes mounting holes and such)
    for (var i = 0; i < this.paths.children.length;) {
        var path = this.paths.children[i];
        if (path.length <= this.scale.ledSpacing * this.scale.ledMinStripLength) {
            path.remove();
        } else {
            i++;
        }
    }

    this.describe = function ()
    {
        for (var i = 0; i < this.paths.children.length; i++) {
            var path = this.paths.children[i];
            var length = path.length;
            var maxLeds = Math.floor(length / this.scale.ledSpacing);
            console.log("LED strip path " + i + ", length " + length + ", " + maxLeds + " LEDs max");
        }
    }

    this.draw = function ()
    {
        var group = new Group();
        var spacing = this.scale.ledSpacing;

        // For each distinct path...
        for (var i = 0; i < this.paths.children.length; i++) {
            var path = this.paths.children[i];
            var length = path.length;
            var maxLeds = Math.floor(length / spacing);

            // Find a starting point and direction. For consistency,
            // let's try starting each path with the LED closest to the bottom-center.

            var originLoc = path.getNearestLocation(new Point(0.5, -1e5));
            var origin = originLoc.getPoint();
            var originOffset = originLoc.offset;
            var direction = 1.0;

            if (path.getPointAt(originOffset + direction * 1e-8).x < origin.x) {
                direction = -direction;
            }

            // Each LED on the path
            for (var n = 0; n < maxLeds; n++) {

                var offset = originOffset + n * spacing * direction;
                if (offset < 0) offset += length;
                if (offset >= length) offset -= length;

                var point = path.getPointAt(offset);
                var tangent = path.getTangentAt(offset) * direction;
                var color = '#777';

                tangent.length = spacing * 0.5;

                if (0 == (n % 8)) color = '#f44';
                if (0 == (n % 64)) color = '#44f';
                if (n == 0) color = '#4f4';

                group.addChild(new Path.Line({
                    from: point,
                    to: point + tangent,
                    strokeColor: color,
                    strokeWidth: spacing * 125,
                    strokeScaling: true
                }));

                group.addChild(new Path.Circle({
                    center: point,
                    radius: spacing * 0.15,
                    fillColor: color,
                }));
            }
        }

        return group;
    }
}


Panel = function ( growth, scale, panelId )
{
    this.growth = growth;
    this.scale = scale;
    this.panelId = panelId;
    this.json = growth.json.panels[panelId];
    this.spinners = [];

    this.drawOutline = function ()
    {
        var path = new Path(this.json.outline);
        path.closePath(true);
        return path;
    }

    this.offsetOutline = function (radius)
    {
        // Hack! Paper.js doesn't have outset/inset. Assuming rectangular panels.
        return new Path.Rectangle(this.bounds.expand(-2*radius));
    }

    this.outlineSupports = function ()
    {
        // Support pieces for the panel's outline
        return this.drawOutline().subtract(this.offsetOutline( this.scale.supportWidth ));
    }

    this.insideSupports = function ()
    {
        // Calculate the area inside the panel's outer supports
        return this.offsetOutline( this.scale.supportWidth );
    }

    this.placeHiddenScrew = function (point)
    {
        // Create a hidden mounting screw that helps hold the front and middle layers together.
        // Pilot hole on the front layer, and a wider hole on the middle layer.

        this.frontPilotHoles.push(new Path.Circle(point, this.scale.drillHiddenScrewPilotRadius));
        this.middleHoles.push(new Path.Circle(point, this.scale.drillHiddenScrewClearanceRadius));

        // Add support
        this.supportCollider.add(point, this.scale.drillHiddenScrewClearanceRadius);
    }

    this.placeMountingScrew = function (point)
    {
        // Create a visible mounting screw, cut clear through all layers, and reinforce the middle layer.

        this.middleSupports.push(new Path.Circle(point, this.scale.drillMountingSupportRadius));

        this.frontHoles.push(new Path.Circle(point, this.scale.drillMountingClearanceRadius));
        this.middleHoles.push(new Path.Circle(point, this.scale.drillMountingClearanceRadius));
        this.backHoles.push(new Path.Circle(point, this.scale.drillMountingClearanceRadius));

        // Add support
        this.supportCollider.add(point, this.scale.drillMountingClearanceRadius);
    }

    this.placeCornerMountingScrews = function ()
    {
        var w = this.scale.cornerScrewDistance;
        this.placeMountingScrew(this.bounds.topLeft + new Point(w, w));
        this.placeMountingScrew(this.bounds.topRight + new Point(-w, w));
        this.placeMountingScrew(this.bounds.bottomLeft + new Point(w, -w));
        this.placeMountingScrew(this.bounds.bottomRight + new Point(-w, -w));
    }

    this.placeEdgeHiddenScrews = function ()
    {
        // Place hidden screws evenly along the edges.
        // Always place an even number, so we don't hit
        // the center where the front layer is split.

        // (Edges stay symmetric, we don't check the collider)

        var w = this.scale.supportWidth / 2;
        var spacing = this.scale.drillHiddenScrewSpacing;
        var countX = ~1 & Math.floor(this.bounds.width / spacing);
        var countY = ~1 & Math.floor(this.bounds.height / spacing);
        var totalX = (countX - 1) * spacing;
        var totalY = (countY - 1) * spacing;

        for (var x = 0; x < countX; x++) {
            var px = this.bounds.center.x - totalX/2 + spacing*x;
            this.placeHiddenScrew(new Point(px, this.bounds.y + w));
            this.placeHiddenScrew(new Point(px, this.bounds.y + this.bounds.height - w));
        }

        for (var y = 0; y < countY; y++) {
            var py = this.bounds.center.y - totalY/2 + spacing*y;
            this.placeHiddenScrew(new Point(this.bounds.x + w, py));
            this.placeHiddenScrew(new Point(this.bounds.x + this.bounds.width - w, py));
        }
    }

    this.placeDotHiddenScrews = function (point, radius)
    {
        // Place hidden screws evenly along the edges.
        // Use supportCollider to avoid redundant screws.

        var spacing = this.scale.drillHiddenScrewSpacing;
        var circumference = 2 * Math.PI * radius;
        var count = Math.floor(circumference / spacing);

        for (var i = 0; i < count; i++) {
            var p = new Point(radius, 0).rotate(i * 360 / count) + point;

            if (!this.supportCollider.hitTest(p, this.scale.drillHiddenScrewMinimumSpacing)) {
                this.placeHiddenScrew(p);
            }
        }
    }

    this.nudgeLargeDot = function (json)
    {
        // The simulation may give us dots that need to move slightly in order to
        // have enough clearance for support pieces. Do that in the JSON model before
        // we use it for anything else.

        // TODO: Assumes panels are rectangular and axis-aligned

        var r = json.radius;
        var c = json.center;
        var b = this.bounds;
        var mt = this.scale.cncMaterialThickness;

        var clearance = 0.001 + r + this.scale.supportWidth + this.scale.ledSpreadDistance;

        c.x = Math.max(c.x, b.left + clearance);
        c.x = Math.min(c.x, b.right - clearance);

        c.y = Math.max(c.y, b.top + clearance);
        c.y = Math.min(c.y, b.bottom - clearance);

        // Another reason to move large dots a tiny bit: edges too close to
        // our front panel boundaries won't be manufacturable. Move inward
        // a little in this case.
        // TODO: assumptions about CNC layout should go elsewhere

        if (c.x + r > b.center.x - mt) c.x = Math.max(c.x, b.center.x - r + mt);
        if (c.y + r > b.center.y - mt) c.y = Math.max(c.y, b.center.y - r + mt);
        if (c.x - r < b.center.x + mt) c.x = Math.min(c.x, b.center.x + r - mt);
        if (c.y - r < b.center.y + mt) c.y = Math.min(c.y, b.center.y + r - mt);
    }

    this.placeLargeDot = function (json)
    {
        this.frontHoles.push(new Path.Circle(json.center, json.radius));

        // Support for fully isolated LED strip around the dot, pointed inward
        var ledRadius = json.radius + this.scale.ledSpreadDistance;
        var outerRadius = ledRadius + this.scale.supportWidth;
        var middleRadius = ledRadius + this.scale.supportWidth / 2.0;

        this.middleSupports.push(new Path.Circle(json.center, outerRadius));
        this.middleHoles.push(new Path.Circle(json.center, ledRadius));
        this.placeDotHiddenScrews(json.center, middleRadius);

        // Large keepout area
        this.largeCollider.add(json.center, outerRadius);

        this.spinners.push(new Spinner(this.scale, json));
    }

    this.canPlaceSmallDot = function (point)
    {
        if (!this.bounds.contains(point)) {
            // Not on this panel, early out.
            return false;
        }

        if (!this.smallDotBounds.contains(point)) {
            // Too close to LEDs mounted on edge
            return false;
        }

        if (this.largeCollider.hitTest(point, this.scale.smallDotRadius + this.scale.ledSmallDotDistance)) {
            // Too close to LEDs mounted outside large dots
            return false;
        } 

        if (this.smallCollider.hitTest(point, this.scale.smallDotRadius + this.scale.smallDotGap)) {
            // Too close to an earlier small dot
            return false;
        }

        return true;
    }

    this.canPlaceSupportIsland = function (point)
    {
        if (!this.supportBounds.contains(point)) {
            // Too close to border supports
            return false;
        }

        if (this.largeCollider.hitTest(point, this.scale.smallDotSupportGap * 2)) {
            // Too close to large dot supports
            return false;
        } 

        if (this.smallCollider.hitTest(point, this.scale.smallDotSupportGap)) {
            // Too close to a small dot
            return false;
        }

        return true;        
    }

    this.placeSmallDot = function (point)
    {
        this.smallCollider.add(point, this.scale.smallDotRadius);
        this.frontHoles.push(new Path.Circle(point, this.scale.smallDotRadius));
    } 

    this.placeStrand = function (json)
    {   
        var path = new Path(json.points);
        if (path.bounds.intersects(this.bounds)) {

            var length = path.length;
            var dotsToPlace = []

            var stride = this.scale.smallDotRadius * 2 + this.scale.smallDotGap;
            var offset = 0;
            if (length > 0) {
                // Align the string of dots along the midline of the panel
                // (Easy compromise between manufacturability and aesthetics for small dots)

                for (var i = 0; i < 4; i++) {
                    var point = path.getPointAt(offset);
                    offset += this.bounds.center.y - point.y;
                }
                offset %= stride;
            }

            while (offset < length) {
                var point = path.getPointAt(offset);

                if (this.canPlaceSmallDot(point)) {
                    // Place the dots later so we don't collide-test on the same strand
                    dotsToPlace.push(point);
                }

                offset += stride;
            }

            for (var i = 0; i < dotsToPlace.length; i++) {
                this.placeSmallDot(dotsToPlace[i]);
            }
        }
        path.remove();
    }

    this.splitIntoGrid = function (r, maxSize)
    {
        // BLAH. Treats layer as an AABB, ignores its shape.

        var partSize = new Point(
            r.width / Math.ceil(r.width / maxSize.x),
            r.height / Math.ceil(r.height / maxSize.y));

        var parts = []

        for (var y = r.top; y < r.bottom; y += partSize.y) {
            for (var x = r.left; x < r.right; x += partSize.x) {
                var p = new Point(x, y);
                var cell = new Path.Rectangle( p, p + partSize );
                parts.push(cell);
            }
        }

        return new Group(parts);
    }

    this.outline = this.drawOutline();
    this.bounds = this.outline.bounds;
    this.largeCollider = new DotCollider();
    this.smallCollider = new DotCollider();
    this.supportCollider = new DotCollider();

    this.smallDotBounds = this.offsetOutline(
        this.scale.ledSmallDotDistance +
        this.scale.smallDotRadius +
        this.scale.supportWidth);

    this.supportBounds = this.offsetOutline(
        this.scale.smallDotSupportGap * 2 +
        this.scale.supportWidth);

    // Paths to aggregate during dot placement
    this.frontHoles = [];
    this.frontPilotHoles = [];
    this.middleSupports = [];
    this.middleHoles = [];
    this.backHoles = [];

    this.placeCornerMountingScrews();
    this.placeEdgeHiddenScrews();

    // Place large dots

    for (var i = 0; i < this.growth.json.dots.length; i++) {
        var dot = this.growth.json.dots[i];
        if (this.bounds.contains(dot.center)) {
            this.nudgeLargeDot(dot);
            this.placeLargeDot(dot);
        }
    }

    // Place small dots along strands

    for (var i = 0; i < this.growth.json.strands.length; i++) {
        this.placeStrand(this.growth.json.strands[i]);
    }

    // Search a grid for additional support islands

    this.supportIslands = new Group();
    for (var x = this.bounds.left; x < this.bounds.right; x += this.scale.smallDotRadius) {
        for (var y = this.bounds.top; y < this.bounds.bottom; y += this.scale.smallDotRadius) {
            var point = new Point(x, y);
            if (this.canPlaceSupportIsland(point)) {
                var r = new Point(this.scale.smallDotRadius * 1.1,
                                  this.scale.smallDotRadius * 1.1);
                var part = new Path.Rectangle(point - r, point + r);
                part.fillColor = '#ff2';
                this.supportIslands.addChild(part);
            }
        }
    }

    for (var i = 0; i < this.supportIslands.children.length; i++) {
        var island = this.supportIslands.children[i];
        //island.simplify(5e-6);
        //console.log("Island " + i + ", area " + island.area);
    }

    var cutHolesInGroup = function (group, holes)
    {
        var newGroup = new Group();
        var holePath = new CompoundPath(holes);

        for (var i = 0; i < group.children.length; i++) {
            var part = group.children[i];
            newGroup.addChild(part.subtract(holePath));
        }

        holePath.remove();
        group.remove();
        return newGroup;
    }

    // Front layer constructed separately for each CNC grid piece

    this.frontLayer = cutHolesInGroup(this.splitIntoGrid(this.outline.bounds, this.scale.cncSize), this.frontHoles);

    // Front pilot holes grouped separately per CNC grid

    this.frontPilotHolesLayer = cutHolesInGroup(this.splitIntoGrid(this.outline.bounds, this.scale.cncSize), this.frontPilotHoles);

    // Spinner layer

    this.spinnerLayer = new Group();
    for (var i = 0; i < this.spinners.length; i++) {
        this.spinnerLayer.addChild(this.spinners[i].draw());
        this.backHoles = this.backHoles.concat(this.spinners[i].drawMountingHoles());
    }

    // Boolean ops for other layers

    this.middleLayer = new CompoundPath(this.middleSupports);
    this.middleLayer = this.middleLayer.unite(this.outlineSupports());
    this.middleLayer = this.middleLayer.subtract(new CompoundPath(this.middleHoles));
    this.backLayer = this.outline.subtract(new CompoundPath(this.backHoles));

    // Candidate locations for LED strip placement: Start with the middle layer
    var ledStripPaths = this.middleLayer.clone();
 
    // Remove the outline path; don't put LEDs on the outside of the panel.
    ledStripPaths.hitTest(this.outline.segments[0].point).item.remove();

    this.ledStrip = new LedStripPlacer(this.scale, ledStripPaths);
    this.ledStrip.describe();

    this.draw = function ()
    {
        this.backLayer.fillColor    = '#21abff';                     // Bright rear layer
        this.middleLayer.fillColor  = new Color(0, 0.6, 0, 0.8);     // Green support layer
        this.frontLayer.fillColor   = new Color(0, 0.7);             // Dark front layer
        this.spinnerLayer.fillColor = new Color(0.5, 0.2, 0.2);      // Red spinner layer 

        return new Group([
            this.backLayer,
            this.middleLayer,
            this.frontLayer,
            this.spinnerLayer,
            this.ledStrip.draw(),
            //this.supportIslands,
        ]);
    }

    this.drawFront = function ()
    {
        this.frontLayer.fillColor = '#000';
        this.spinnerLayer.fillColor = '#222';
        // this.frontPilotHolesLayer.fillColor = '#f44';

        return new Group([
            this.frontLayer,
            this.spinnerLayer,
            // this.frontPilotHolesLayer,
        ]);
    }

    this.drawMiddle = function ()
    {
        this.middleLayer.fillColor = '#000';
        return this.middleLayer;
    }

    this.drawBack = function ()
    {
        this.backLayer.fillColor = '#000';
        return this.backLayer;
    }
}


MakeDiagramPage = function (item, scale)
{
    var world = new Group();
    world.addChild(item);
    world.addChild(scale.drawGrid(item.bounds));

    world.fitBounds(view.bounds.expand(-100));
    world.scale(1, -1);

    var layer = new Layer(world);
    layer.activate();
    return layer;
}


MakeActualSizePage = function (item, scale)
{
    var world = new Group();
    world.addChild(item);

    world.scale( scale.unitsToPt, -scale.unitsToPt );
    world.translate( view.center - world.center );

    var layer = new Layer(world);
    layer.activate();
    return layer;
}
